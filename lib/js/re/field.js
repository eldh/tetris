// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Piece = require("./piece.js");
var Pixel = require("./pixel.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var FieldTouchHandler = require("./fieldTouchHandler.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var Dimensions$BsReactNative = require("bs-react-native/lib/js/src/dimensions.js");
var SafeAreaView$BsReactNative = require("bs-react-native/lib/js/src/components/safeAreaView.js");

var windowWidth = Dimensions$BsReactNative.get(/* window */-762539024).width;

function coordinatesForPiece(param) {
  var x = param[/* x */2];
  var y = param[/* y */1];
  var rotatedPosition = List.nth(Piece.getPositionsForPeice(param[/* piece */0]), param[/* rotation */3]);
  return List.map((function (param) {
                return /* tuple */[
                        param[0] + x | 0,
                        param[1] + y | 0
                      ];
              }), rotatedPosition);
}

function hasHitGround(positions) {
  return List.fold_left((function (max, param) {
                var y = param[1];
                var match = y > max;
                if (match) {
                  return y;
                } else {
                  return max;
                }
              }), -999, positions) > 19;
}

function convertToFilled(piece) {
  return List.map((function (param) {
                return /* record */[
                        /* y */param[1],
                        /* x */param[0],
                        /* piece */piece[/* piece */0]
                      ];
              }), coordinatesForPiece(piece));
}

function justFilledCoords(param) {
  return List.map((function (coord) {
                return /* tuple */[
                        coord[/* x */1],
                        coord[/* y */0]
                      ];
              }), param);
}

function isDead(piece, filled) {
  return List.exists((function (param) {
                return param[1] < -2;
              }), List.append(coordinatesForPiece(piece), justFilledCoords(filled)));
}

function collidesWithExisting(filled, piece) {
  return List.exists((function (coord) {
                return List.exists((function (fromPiece) {
                              return Caml_obj.caml_equal(coord, fromPiece);
                            }), coordinatesForPiece(piece));
              }), justFilledCoords(filled));
}

function positionedPiece(piece) {
  return /* record */[
          /* piece */piece,
          /* y */4,
          /* x */4,
          /* rotation */0
        ];
}

function canMoveY(param) {
  var activePiece = param[/* activePiece */1];
  var potentialPiece_000 = /* piece */activePiece[/* piece */0];
  var potentialPiece_001 = /* y */activePiece[/* y */1] + 1 | 0;
  var potentialPiece_002 = /* x */activePiece[/* x */2];
  var potentialPiece_003 = /* rotation */activePiece[/* rotation */3];
  var potentialPiece = /* record */[
    potentialPiece_000,
    potentialPiece_001,
    potentialPiece_002,
    potentialPiece_003
  ];
  return !(hasHitGround(coordinatesForPiece(potentialPiece)) || collidesWithExisting(param[/* filled */3], potentialPiece));
}

function setPosition(pan) {
  console.log(pan);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("Field");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var match = param[/* state */1];
              var activePiece = match[/* activePiece */1];
              var boardAspectRatio = 20 / 10;
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(SafeAreaView$BsReactNative.make, [
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* Some */[Style$BsReactNative.style(/* :: */[
                                      Style$BsReactNative.position(/* Relative */1),
                                      /* :: */[
                                        Style$BsReactNative.display(/* Flex */0),
                                        /* :: */[
                                          Style$BsReactNative.backgroundColor(/* String */Block.__(0, ["rgb(40, 40, 40)"])),
                                          /* :: */[
                                            Style$BsReactNative.flex(1),
                                            /* :: */[
                                              Style$BsReactNative.aspectRatio(1 / boardAspectRatio),
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ])],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* array */[match[/* gameOver */0] ? ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[Style$BsReactNative.style(/* :: */[
                                                    Style$BsReactNative.position(/* Relative */1),
                                                    /* :: */[
                                                      Style$BsReactNative.display(/* Flex */0),
                                                      /* :: */[
                                                        Style$BsReactNative.flex(1),
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ])], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["Game over"]))])) : ReasonReact.element(/* None */0, /* None */0, FieldTouchHandler.make((function (dir) {
                                              return Curry._1(send, /* MoveX */[dir]);
                                            }), (function () {
                                              return Curry._1(send, /* Rotate */3);
                                            }), (function () {
                                              return Curry._1(send, /* MoveY */1);
                                            }), /* array */[
                                            ReasonReact.element(/* Some */[String(activePiece[/* x */2]) + String(activePiece[/* y */1])], /* None */0, Piece.make(activePiece[/* piece */0], activePiece[/* rotation */3], /* tuple */[
                                                      activePiece[/* x */2],
                                                      activePiece[/* y */1]
                                                    ], /* array */[])),
                                            $$Array.of_list(List.map((function (coord) {
                                                        return ReasonReact.element(/* Some */[String(coord[/* x */1]) + String(coord[/* y */0])], /* None */0, Pixel.make(/* tuple */[
                                                                        coord[/* x */1],
                                                                        coord[/* y */0]
                                                                      ], "rgb(90,90,90)", /* array */[]));
                                                      }), match[/* filled */3]))
                                          ]))]
                            ]));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* gameOver */false,
                      /* activePiece */positionedPiece(Piece.createPiece(/* () */0)),
                      /* nextPiece */Piece.createPiece(/* () */0),
                      /* filled : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      var match = state[/* gameOver */0];
                      if (match) {
                        return /* NoUpdate */0;
                      } else {
                        return /* SideEffects */Block.__(1, [(function (self) {
                                      var match = canMoveY(self[/* state */1]);
                                      return Curry._1(self[/* send */3], match ? /* MoveY */1 : /* NewPiece */2);
                                    })]);
                      }
                  case 1 : 
                      var init = state[/* activePiece */1];
                      return /* Update */Block.__(0, [/* record */[
                                  /* gameOver */state[/* gameOver */0],
                                  /* activePiece : record */[
                                    /* piece */init[/* piece */0],
                                    /* y */state[/* activePiece */1][/* y */1] + 1 | 0,
                                    /* x */init[/* x */2],
                                    /* rotation */init[/* rotation */3]
                                  ],
                                  /* nextPiece */state[/* nextPiece */2],
                                  /* filled */state[/* filled */3]
                                ]]);
                  case 2 : 
                      var match$1 = isDead(state[/* activePiece */1], state[/* filled */3]);
                      return /* Update */Block.__(0, [match$1 ? /* record */[
                                    /* gameOver */true,
                                    /* activePiece */state[/* activePiece */1],
                                    /* nextPiece */state[/* nextPiece */2],
                                    /* filled */state[/* filled */3]
                                  ] : /* record */[
                                    /* gameOver */state[/* gameOver */0],
                                    /* activePiece */positionedPiece(state[/* nextPiece */2]),
                                    /* nextPiece */Piece.createPiece(/* () */0),
                                    /* filled */List.append(convertToFilled(state[/* activePiece */1]), state[/* filled */3])
                                  ]]);
                  case 3 : 
                      var init$1 = state[/* activePiece */1];
                      var match$2 = state[/* activePiece */1][/* rotation */3] === 3;
                      return /* Update */Block.__(0, [/* record */[
                                  /* gameOver */state[/* gameOver */0],
                                  /* activePiece : record */[
                                    /* piece */init$1[/* piece */0],
                                    /* y */init$1[/* y */1],
                                    /* x */init$1[/* x */2],
                                    /* rotation */match$2 ? 0 : state[/* activePiece */1][/* rotation */3] + 1 | 0
                                  ],
                                  /* nextPiece */state[/* nextPiece */2],
                                  /* filled */state[/* filled */3]
                                ]]);
                  
                }
              } else {
                var init$2 = state[/* activePiece */1];
                return /* Update */Block.__(0, [/* record */[
                            /* gameOver */state[/* gameOver */0],
                            /* activePiece : record */[
                              /* piece */init$2[/* piece */0],
                              /* y */init$2[/* y */1],
                              /* x */state[/* activePiece */1][/* x */2] + (
                                action[0] ? 1 : -1
                              ) | 0,
                              /* rotation */init$2[/* rotation */3]
                            ],
                            /* nextPiece */state[/* nextPiece */2],
                            /* filled */state[/* filled */3]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.windowWidth = windowWidth;
exports.coordinatesForPiece = coordinatesForPiece;
exports.hasHitGround = hasHitGround;
exports.convertToFilled = convertToFilled;
exports.justFilledCoords = justFilledCoords;
exports.isDead = isDead;
exports.collidesWithExisting = collidesWithExisting;
exports.positionedPiece = positionedPiece;
exports.canMoveY = canMoveY;
exports.setPosition = setPosition;
exports.component = component;
exports.make = make;
/* windowWidth Not a pure module */
